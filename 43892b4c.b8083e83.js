(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{144:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var i=n(2),a=n(9),r=(n(0),n(165)),s={id:"configuration",title:"Configuration",sidebar_label:"Configuration"},o={id:"install/configuration",title:"Configuration",description:"ZenCrepes configuration takes the shape of a file that can be shared (but can also be different) between zqueue, zindexer and zapi. It's full version is available in zindexer/src/components/config/defaultConfig.ts",source:"@site/docs/install/configuration.md",permalink:"/docs/install/configuration",editUrl:"https://github.com/zencrepes/docs/tree/master/docs/docs/install/configuration.md",sidebar_label:"Configuration",sidebar:"someSidebar",previous:{title:"Architecture",permalink:"/docs/install/architecture"},next:{title:"Overview",permalink:"/docs/github/overview"}},c=[{value:"Elasticsearch",id:"elasticsearch",children:[{value:"Connecting to Elasticsearch",id:"connecting-to-elasticsearch",children:[]},{value:"System indices",id:"system-indices",children:[]},{value:"One Index per Source",id:"one-index-per-source",children:[]},{value:"Data indices",id:"data-indices",children:[]}]},{value:"Redis",id:"redis",children:[]},{value:"GitHub",id:"github",children:[]},{value:"CircleCI",id:"circleci",children:[]},{value:"Jira",id:"jira",children:[]}],l={rightToc:c};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"ZenCrepes configuration takes the shape of a file that can be shared (but can also be different) between zqueue, zindexer and zapi. It's full version is available in ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/zencrepes/zindexer/blob/master/src/components/config/defaultConfig.ts"}),"zindexer/src/components/config/defaultConfig.ts")),Object(r.b)("p",null,"This part of the documentation will break the configuration by type, for simplicity (and compactness) the documentation will show JSON snippets but the file is composed of its YML translation."),Object(r.b)("h2",{id:"elasticsearch"},"Elasticsearch"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-json"}),"  elasticsearch: {\n    host: 'http://127.0.0.1:9200',\n    sslCa: '',\n    cloudId: '',\n    username: '',\n    password: '',\n    sysIndices: {\n      sources: 'sources', // this index is used to store sources data\n      datasets: 'datasets', // this index is used to store data about available index types\n      config: 'config', // this index is used to store zencrepes configuration\n    },\n    oneIndexPerSource: false,\n    dataIndices: {\n      githubRepos: 'gh_repos',\n      githubIssues: 'gh_issues_',\n      githubPullrequests: 'gh_prs_',\n      githubVulnerabilities: 'gh_vulns_',\n      githubStargazers: 'gh_stargazers_watchers_',\n      githubWatchers: 'gh_stargazers_watchers_',\n      githubProjects: 'gh_projects_',\n      githubMilestones: 'gh_milestones_',\n      githubLabels: 'gh_labels_',\n      githubReleases: 'gh_releases_',\n      jiraIssues: 'j_issues_',\n      jiraProjects: 'j_projects_',\n      circleciPipelines: 'cci_pipelines_',\n      circleciEnvvars: 'cci_envvars_',\n      circleciInsights: 'cci_insights_',\n    },\n  },\n")),Object(r.b)("h3",{id:"connecting-to-elasticsearch"},"Connecting to Elasticsearch"),Object(r.b)("p",null,"You can connect to a local Elasticsearch instance or an instance running in Elastic Cloud (by providing your ",Object(r.b)("inlineCode",{parentName:"p"},"cloudID")," and credentials). The details on how the connection is established are ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/zencrepes/zindexer/blob/master/src/utils/es/esClient.ts"}),"available here")),Object(r.b)("h3",{id:"system-indices"},"System indices"),Object(r.b)("p",null,"ZenCrepes uses system indices to store some data needed for it to operate."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"sources"),": Used by ",Object(r.b)("inlineCode",{parentName:"li"},"zindexer")," to determine what data elements to fetch. For example you could scan an entire organization but only enable data fetching for some of its repositories. This index will contain the list of sources and which are enabled or not."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"datasets"),": ",Object(r.b)("em",{parentName:"li"},"Deprecated")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"config"),": Holds ZenCrepes configuration (which datasets are available, which facets to show, how to display and export the list view). This index is used by ",Object(r.b)("inlineCode",{parentName:"li"},"zindexer")," and ",Object(r.b)("inlineCode",{parentName:"li"},"zapi"),".")),Object(r.b)("h3",{id:"one-index-per-source"},"One Index per Source"),Object(r.b)("p",null,"Although this is currently available and operational, its use it still a bit uncertain. The original idew was to store data in one index per source, later allowing index level permissions to be configured. Using this feature on an organization with a lot of repositories will result in a lot of data generated."),Object(r.b)("h3",{id:"data-indices"},"Data indices"),Object(r.b)("p",null,"These are the indices used to store data from the different datasets. These must be identical between ",Object(r.b)("inlineCode",{parentName:"p"},"zindexer"),", ",Object(r.b)("inlineCode",{parentName:"p"},"zapi")," and ",Object(r.b)("inlineCode",{parentName:"p"},"zqueue")," configuration."),Object(r.b)("h2",{id:"redis"},"Redis"),Object(r.b)("p",null,"Use this configuration option to setup the Redis host, used by zqueue to handle its queue mechanism."),Object(r.b)("h2",{id:"github"},"GitHub"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-json"}),"  github: {\n    enabled: true,\n    username: 'YOUR_USERNAME',\n    token: 'YOUR_TOKEN',\n    fetch: {\n      maxNodes: 30,\n      maxParallel: 1,\n      delayBetweenCalls: 1000,\n    },\n    // Define a match between a points label and numbers\n    storyPointsLabels: [\n      { label: 'xx-small', points: 1 },\n      { label: 'x-small', points: 2 },\n      { label: 'small', points: 3 },\n      { label: 'medium', points: 5 },\n      { label: 'large', points: 8 },\n      { label: 'x-large', points: 13 },\n    ],\n    // The webhook configuration is used by zqueue to determine next course of action\n    webhook: {\n      secret: 'PLEASE_CHANGE_ME',\n      // The Array of events matches and event name with an entity type as processed by ZenCrepes\n      // You shouldn't need to change these values\n      events: [\n        { githubEvent: 'label', zencrepesEntity: 'labels' },\n        { githubEvent: 'repository', zencrepesEntity: 'repos' },\n        { githubEvent: 'pull_request', zencrepesEntity: 'pullrequests' },\n        { githubEvent: 'issues', zencrepesEntity: 'issues' },\n        { githubEvent: 'vulnerabilities', zencrepesEntity: 'vulnerabilities' },\n        { githubEvent: 'stargazers', zencrepesEntity: 'star' },\n        { githubEvent: 'watchers', zencrepesEntity: 'watch' },\n        { githubEvent: 'project', zencrepesEntity: 'projects' },\n        { githubEvent: 'milestone', zencrepesEntity: 'milestones' },\n        { githubEvent: 'release', zencrepesEntity: 'releases' },\n      ],\n      // Save the raw webhook \"as-received\" in a timeline fashion (no overwrite)\n      timelinePayload: {\n        includeGithubEvents: ['*'],\n        excludeGithubEvents: ['push', 'create'],\n        esIndexPrefix: 'gh_webhook_timeline_',\n      },\n      // Save the node data contained in the webhook\n      // Overwrite previous node state if the same node with same ID is received\n      // One index per node type\n      nodePayload: {\n        includeGithubEvents: ['*'],\n        excludeGithubEvents: ['push', 'create'],\n        esIndexPrefix: 'gh_webhook_',\n      },\n      // Execute a call to GitHub to fetch the latest data in the same format than zindexer (using the same GraphQL query)\n      // Data is fed into the indices specified in the elasticsearch section\n      fetchNode: {\n        includeGithubEvents: ['*'],\n        excludeGithubEvents: [''],\n      },\n    },\n  },\n")),Object(r.b)("h2",{id:"circleci"},"CircleCI"),Object(r.b)("h2",{id:"jira"},"Jira"))}u.isMDXComponent=!0},165:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return p}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},h=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),h=i,p=d["".concat(s,".").concat(h)]||d[h]||b[h]||r;return n?a.a.createElement(p,o(o({ref:t},l),{},{components:n})):a.a.createElement(p,o({ref:t},l))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var l=2;l<r;l++)s[l]=n[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);